<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE sqlMap SYSTEM "SqlMap.dtd">
<sqlMap>
  <delete id="HU_RPT_TER_EMP">
    select
    e.NAME_C1, e.NAME_C2, e.ORG_LINK, e.ORG_LINK_NAME,
    SUM(CASE
    WHEN (e.last_date >
    <isPropertyAvailable property ="END_DATE">
      <isNotEmpty property="END_DATE">
        TRUNC(#END_DATE#)
      </isNotEmpty>
    </isPropertyAvailable>
    OR e.last_date is null) AND e.STT=1 THEN
    1
    ELSE
    0
    END) NV_DLV,
    SUM(CASE
    WHEN (e.last_date >=
    <isPropertyAvailable property ="START_DATE">
      <isNotEmpty property="START_DATE">
        TRUNC(#START_DATE#)
      </isNotEmpty>
    </isPropertyAvailable>
    and e.last_date &lt;=
    <isPropertyAvailable property ="END_DATE">
      <isNotEmpty property="END_DATE">
        TRUNC(#END_DATE#)
      </isNotEmpty>
    </isPropertyAvailable>
    ) AND e.STT=1 THEN
    1
    ELSE
    0
    END) NV_DNV,
    --------
    SUM(CASE
    WHEN (e.last_date >
    <isPropertyAvailable property ="END_DATE">
      <isNotEmpty property="END_DATE">
        TRUNC(#END_DATE#)
      </isNotEmpty>
    </isPropertyAvailable>
    OR e.last_date is null) AND e.STT=1 THEN
    1
    ELSE
    0
    END) +
    SUM(CASE
    WHEN (e.last_date >=
    <isPropertyAvailable property ="START_DATE">
      <isNotEmpty property="START_DATE">
        TRUNC(#START_DATE#)
      </isNotEmpty>
    </isPropertyAvailable>
    and e.last_date &lt;=
    <isPropertyAvailable property ="END_DATE">
      <isNotEmpty property="END_DATE">
        TRUNC(#END_DATE#)
      </isNotEmpty>
    </isPropertyAvailable>
    ) AND e.STT=1 THEN
    1
    ELSE
    0
    END) TONG
    -------------
    FROM
    (select
    ROW_NUMBER() OVER(PARTITION BY O.NAME_C1, O.NAME_C2, ORG_LINK, ORG_LINK_NAME, e.id ORDER BY e.id, e.fullname_vn DESC) STT,
    e.id, e.fullname_vn, t.last_date, O.NAME_C1, O.NAME_C2, ORG_LINK, ORG_LINK_NAME
    from hu_employee e
    left join (
    SELECT NAME_C1,
    NAME_C2,
    ID_C1,
    ID_C2,
    CASE
    WHEN ID_C2 IS NOT NULL THEN
    ID_C2
    WHEN ID_C1 IS NOT NULL THEN
    ID_C1
    END ORG_LINK,
    CASE
    WHEN ID_C2 IS NOT NULL THEN
    NAME_C2
    WHEN ID_C1 IS NOT NULL THEN
    NAME_C1
    END ORG_LINK_NAME,
    ID,
    DESCRIPTION_PATH
    FROM (SELECT SUBSTR(REGEXP_SUBSTR(ORG_NAME, '![^!]*', 1, 1), 2) AS NAME_C1,
    SUBSTR(REGEXP_SUBSTR(ORG_NAME, '![^!]*', 1, 2), 2) AS NAME_C2,
    SUBSTR(REGEXP_SUBSTR(IDS, '![^!]*', 1, 1), 2) AS ID_C1,
    SUBSTR(REGEXP_SUBSTR(IDS, '![^!]*', 1, 2), 2) AS ID_C2,
    DESCRIPTION_PATH,
    ID
    FROM (SELECT O.ID,
    O.DESCRIPTION_PATH,
    SYS_CONNECT_BY_PATH(O.NAME_VN, '!') ORG_NAME,
    SYS_CONNECT_BY_PATH(O.ID, '!') IDS
    FROM HU_ORGANIZATION O
    START WITH O.PARENT_ID IS NULL
    CONNECT BY PRIOR O.ID = O.PARENT_ID)) O
    WHERE NAME_C2 IS NOT NULL
    <isPropertyAvailable property ="ORGLISTID">
      <isNotEmpty property="ORGLISTID">
        AND ID IN ($ORGLISTID$)
      </isNotEmpty>
    </isPropertyAvailable>
    ORDER BY O.DESCRIPTION_PATH
    ) o on o.id=e.org_id
    left join hu_terminate t
    on t.employee_id = e.id
    ORDER BY O.NAME_C1, O.NAME_C2 ASC, e.id, e.fullname_vn DESC) e
    GROUP BY e.NAME_C1, e.NAME_C2, e.ORG_LINK, e.ORG_LINK_NAME
    ORDER BY e.NAME_C1, e.NAME_C2 ASC, e.ORG_LINK, e.ORG_LINK_NAME DESC
  </delete>
</sqlMap>